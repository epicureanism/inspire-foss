# Stetl ETL config to transform Dutch Addresses (BAG) to INSPIRE AD
# see test/etl.sh for an example
#

# The ETL chains, as executed in order, each element points to a [section] below
[etl]
chains = input_sql_pre|output_postgres,
         input_pg_woonplaats|gml_splitter|transformer_xslt|output_deegree_blobstore,
         input_pg_postcode|gml_splitter|transformer_xslt|output_deegree_blobstore,
         input_pg_openbareruimte|gml_splitter|transformer_xslt|output_deegree_blobstore,
         input_pg_ligplaats|gml_splitter|transformer_xslt|output_deegree_blobstore,
         input_pg_standplaats|gml_splitter|transformer_xslt|output_deegree_blobstore,
         input_pg_verblijfsobject|gml_splitter|transformer_xslt|output_deegree_blobstore

# File output, enable to output GML into files, rename to activate
[etl_file]
chains = input_pg_woonplaats|gml_splitter|transformer_xslt|output_file_aa,
         input_pg_postcode|gml_splitter|transformer_xslt|output_file_pc,
         input_pg_openbareruimte|gml_splitter|transformer_xslt|output_file_tf,
         input_pg_verblijfsobject|gml_splitter|transformer_xslt|output_file_ad

# test only: rename to activate
[etl_disabled_for_test]
chains = input_sql_pre|output_postgres,
          input_pg_woonplaats|gml_splitter|transformer_xslt|xml_schema_validator|output_deegree_blobstore ,
         input_pg_postcode|gml_splitter|transformer_xslt|xml_schema_validator|output_deegree_blobstore,
         input_pg_openbareruimte|gml_splitter|transformer_xslt|xml_schema_validator|output_deegree_blobstore,
         input_pg_ligplaats|gml_splitter|transformer_xslt|xml_schema_validator|output_deegree_blobstore,
         input_pg_standplaats|gml_splitter|transformer_xslt|xml_schema_validator|output_deegree_blobstore

# INPUTS

# Pre SQL file inputs to be executed like truncating the output table
[input_sql_pre]
class = inputs.fileinput.StringFileInput
file_path = empty-table.sql

# Extract data from source DB into Simple OGR Feature stream from woonplaats (for AddressArea)
[input_pg_woonplaats]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = {in_db_name}
in_pg_schema = {in_db_schema} 
in_pg_host     = {in_db_host}
in_pg_user     = {in_db_user}
in_pg_password = {in_db_password}
in_pg_port = {in_db_port}
in_pg_sql = SELECT
	wp.identificatie,
	wp.woonplaatsnaam,
	translate(to_char(wp.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(wp.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid
	FROM woonplaatsactueelbestaand as wp
out_srs = {out_srs}
out_layer_name = woonplaats
out_geotype =
out_gml_format = GML3
out_dimension = 2

[input_pg_postcode]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = {in_db_name}
in_pg_schema = {in_db_schema}
in_pg_host     = {in_db_host}
in_pg_user     = {in_db_user}
in_pg_password = {in_db_password}
in_pg_port = {in_db_port}
in_pg_sql = SELECT DISTINCT
	na.postcode
	FROM nummeraanduidingactueelbestaand as na
out_srs = {out_srs}
out_layer_name = postcode
out_geotype =
out_gml_format = GML3
out_dimension = 2

[input_pg_openbareruimte]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = bag
in_pg_schema = {in_db_schema}
in_pg_host     = localhost
in_pg_user     = postgres
in_pg_password = postgres
in_pg_port = 5432
in_pg_sql = SELECT
	orn.identificatie,
	orn.openbareruimtenaam,
	translate(to_char(orn.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(orn.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid
	FROM openbareruimteactueelbestaand as orn
out_srs = {out_srs}
out_layer_name = openbareruimte
out_geotype =
out_gml_format = GML3
out_dimension = 2

[input_pg_verblijfsobject]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = {in_db_name}
in_pg_schema = {in_db_schema}
in_pg_host     = {in_db_host}
in_pg_user     = {in_db_user}
in_pg_password = {in_db_password}
in_pg_port = {in_db_port}
in_pg_sql = SELECT
    na.identificatie,
    na.huisnummer,
    na.huisletter,
    na.huisnummertoevoeging,
    na.gerelateerdeopenbareruimte,
    na.postcode,
    (CASE
      WHEN wp2.woonplaatsnaam IS NULL THEN
      	w.identificatie ELSE
      	wp2.identificatie END)
      	as woonplaats,
	translate(to_char(na.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(na.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid,
	ST_Force_2D(ao.geopunt)
   FROM verblijfsobjectactueelbestaand ao
    JOIN nummeraanduidingactueelbestaand na ON (na.identificatie = ao.hoofdadres)
    JOIN openbareruimteactueelbestaand o ON (na.gerelateerdeopenbareruimte = o.identificatie)
    JOIN woonplaatsactueelbestaand w ON (o.gerelateerdewoonplaats = w.identificatie)
    LEFT OUTER JOIN woonplaatsactueelbestaand wp2 ON (na.gerelateerdewoonplaats = wp2.identificatie)
out_srs = {out_srs}
out_layer_name = adres
out_geotype = POINT
out_gml_format = GML3
out_dimension = 2

[input_pg_ligplaats]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = {in_db_name}
in_pg_schema = {in_db_schema}
in_pg_host     = {in_db_host}
in_pg_user     = {in_db_user}
in_pg_password = {in_db_password}
in_pg_port = {in_db_port}
in_pg_sql = SELECT
    na.identificatie,
    na.huisnummer,
    na.huisletter,
    na.huisnummertoevoeging,
    na.gerelateerdeopenbareruimte,
    na.postcode,
    (CASE
      WHEN wp2.woonplaatsnaam IS NULL THEN
      	w.identificatie ELSE
      	wp2.identificatie END)
      	as woonplaats,
	translate(to_char(na.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(na.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid,
	ST_Centroid(ST_Force_2D(ao.geovlak))
   FROM ligplaatsactueelbestaand ao
    JOIN nummeraanduidingactueelbestaand na ON (na.identificatie = ao.hoofdadres)
    JOIN openbareruimteactueelbestaand o ON (na.gerelateerdeopenbareruimte = o.identificatie)
    JOIN woonplaatsactueelbestaand w ON (o.gerelateerdewoonplaats = w.identificatie)
    LEFT OUTER JOIN woonplaatsactueelbestaand wp2 ON (na.gerelateerdewoonplaats = wp2.identificatie)
out_srs = {out_srs}
out_layer_name = adres
out_geotype = POINT
out_gml_format = GML3
out_dimension = 2

[input_pg_standplaats]
class = inputs.ogrinput.OgrPostgisInput
in_srs = {in_srs}
in_pg_db = {in_db_name}
in_pg_schema = {in_db_schema}
in_pg_host     = {in_db_host}
in_pg_user     = {in_db_user}
in_pg_password = {in_db_password}
in_pg_port = {in_db_port}
in_pg_sql = SELECT
    na.identificatie,
    na.huisnummer,
    na.huisletter,
    na.huisnummertoevoeging,
    na.gerelateerdeopenbareruimte,
    na.postcode,
    (CASE
      WHEN wp2.woonplaatsnaam IS NULL THEN
      	w.identificatie ELSE
      	wp2.identificatie END)
      	as woonplaats,
	translate(to_char(na.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(na.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid,
	ST_Centroid(ST_Force_2D(ao.geovlak))
   FROM standplaatsactueelbestaand ao
    JOIN nummeraanduidingactueelbestaand na ON (na.identificatie = ao.hoofdadres)
    JOIN openbareruimteactueelbestaand o ON (na.gerelateerdeopenbareruimte = o.identificatie)
    JOIN woonplaatsactueelbestaand w ON (o.gerelateerdewoonplaats = w.identificatie)
    LEFT OUTER JOIN woonplaatsactueelbestaand wp2 ON (na.gerelateerdewoonplaats = wp2.identificatie)
out_srs = {out_srs}
out_layer_name = adres
out_geotype = POINT
out_gml_format = GML3
out_dimension = 2

# FILTERS (see [etl] section for active Filters)

# Splits the OGR XML Feature stream into manageable internal DOM (etree) docs
[gml_splitter]
class = filters.gmlsplitter.GmlSplitter
max_features = {gml_split_at}
start_container = <?xml version="1.0" encoding="UTF-8"?>
    <ogr:FeatureCollection
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://ogr.maptools.org/ my.xsd"
     xmlns:ogr="http://ogr.maptools.org/"
     xmlns:gml="http://www.opengis.net/gml">
end_container = </ogr:FeatureCollection>
container_tag = ogr:FeatureCollection
start_feature_markers = <ogr:featureMember
end_feature_markers = </ogr:featureMember>

# The Works: actual Model Transform from BAG to INSPIRE
[transformer_xslt]
class = filters.xsltfilter.XsltFilter
script = local-to-inspire-ad-sd.xsl

# Validator for XML (needs some work to get working)
[xml_schema_validator]
class = filters.xmlvalidator.XmlSchemaValidator
xsd = {validator_xsd}
# xsd = http://inspire.ec.europa.eu/schemas/ad/3.0/Addresses.xsd
enabled = True

# OUTPUTS (see [etl] section for active outputs, replace there to switch outputs)
[output_std]
class = output.Output

[output_file]
class = outputs.fileoutput.FileOutput
file_path = test/output.gml

[output_file_aa]
class = outputs.fileoutput.FileOutput
file_path = test/bulk/ad-addressarea.gml

[output_file_pc]
class = outputs.fileoutput.FileOutput
file_path = test/bulk/ad-postalcode.gml

[output_file_tf]
class = outputs.fileoutput.FileOutput
file_path = test/bulk/ad-thoroughfare.gml

[output_file_ad]
class = outputs.fileoutput.MultiFileOutput
file_path = test/bulk/ad-address-%03d.gml

[output_deegree_blobstore]
class = outputs.deegreeoutput.DeegreeBlobstoreOutput
overwrite = False
feature_member_tag = member
srid = -1
database = {out_db_name}
host = {out_db_host}
port = {out_db_port}
user     = {out_db_user}
password = {out_db_password}
schema = {out_db_schema}

[output_postgres]
class = outputs.dboutput.PostgresDbOutput
database = {out_db_name}
host = {out_db_host}
port = {out_db_port}
user     = {out_db_user}
password = {out_db_password}
schema = {out_db_schema}

[output_wfst]
class = outputs.wfsoutput.WFSTOutput
host = {wfst_host}
port = {wfst_port}
path = {wfst_path}
idgen = {wfst_idgen}
